name: ci

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'  # every day at midnight

jobs:
  gcc_ubuntu_18_04:
    strategy:
      matrix:
        version: [4.8, 5, 6, 8]
    runs-on: ubuntu-22.04
    container:
      image: ubuntu:18.04
    env:
      CC: gcc-${{ matrix.version }}
      CXX: g++-${{ matrix.version }}
    steps:
      - name: "Install git..."
        run: |
          apt-get update && apt-get install -y software-properties-common && \
          apt-get update && add-apt-repository -y ppa:git-core/ppa && \
          apt-get update && apt-get install -y git

      - name: "Checkout libcdada"
        uses: actions/checkout@v2
        with:
          path: libcdada

      - name: "Install deps"
        run: ./libcdada/.github/workflows/deps.sh gcc ${{ matrix.version }}

      - name: "Compile and test using GCC${{ matrix.version }}"
        run: cd libcdada && .github/workflows/test_script.sh
        env:
          CONFIG_FLAGS: --disable-silent-rules
      - name: "Compile and test using GCC${{ matrix.version }} (DEBUG)"
        run: cd libcdada && .github/workflows/test_script.sh
        env:
          CONFIG_FLAGS: --disable-silent-rules --enable-debug

  gcc_ubuntu_22_04:
    strategy:
      matrix:
        version: [9, 10, 11, 12]
    runs-on: ubuntu-22.04
    env:
      CC: gcc-${{ matrix.version }}
      CXX: g++-${{ matrix.version }}
    steps:
      - name: "Checkout libcdada"
        uses: actions/checkout@v2
        with:
          path: libcdada

      - name: "Install deps"
        run: ./libcdada/.github/workflows/deps.sh gcc ${{ matrix.version }}

      - name: "Compile and test using GCC${{ matrix.version }}"
        run: cd libcdada && .github/workflows/test_script.sh
        env:
          CONFIG_FLAGS: --disable-silent-rules
      - name: "Compile and test using GCC${{ matrix.version }} (DEBUG)"
        run: cd libcdada && .github/workflows/test_script.sh
        env:
          CONFIG_FLAGS: --disable-silent-rules --enable-debug

  clang:
    runs-on: ubuntu-22.04
    env:
      CC: clang
      CXX: clang++
      CFLAGS: -gdwarf-4 #clang14 and on use dwarf5, but valgrind doesn't support it
      CXXFLAGS: -gdwarf-4
    steps:
      - name: "Checkout libcdada"
        uses: actions/checkout@v2
        with:
          path: libcdada

      - name: "Install deps"
        run: ./libcdada/.github/workflows/deps.sh clang

      - name: "Compile and test using clang"
        run: cd libcdada && .github/workflows/test_script.sh
        env:
          CONFIG_FLAGS: --disable-silent-rules
      - name: "Compile and test using clang (DEBUG)"
        run: cd libcdada && .github/workflows/test_script.sh
        env:
          CONFIG_FLAGS: --disable-silent-rules --enable-debug
